namespace "conc"
import "~~/io.mir"

// Concurrency constructs

// Sleep

let Sleep = scheme::thread_sleepM

// Condition variable

struct cvar(Wait, Signal, Broadcast)

fun Condition() {
  let var = scheme::make_condition_variable()
  fun Wait(lk) {
    scheme::mutex_unlockM(lk.__impl__, var)
  }
  fun Signal() {
    scheme::condition_variable_signalM(var)
  }
  fun Broadcast() {
    scheme::condition_variable_broadcastM(var)
  }
  cvar(Wait, Signal, Broadcast)
}

// Mutex lock

struct mtx(Lock, Unlock, __impl__)

fun Mutex() {
  let var = scheme::make_mutex()
  fun Lock() scheme::mutex_lockM(var)
  fun Unlock() scheme::mutex_unlockM(var)
  mtx(Lock, Unlock, var)
}

// Channel

struct chan(Send, Recv)

fun make_unbuffered_chan() {
  let lock = Mutex()
  let sendlock = Mutex()
  let sent = Condition()
  let received = Condition()
  let boxfilled = false
  let box = 0
  fun Send(value) {
    sendlock.Lock()
    lock.Lock()
    set box = value
    set boxfilled = true
    sent.Broadcast()
    while (boxfilled) received.Wait(lock)
    lock.Unlock()
    sendlock.Unlock()
  }
  
  fun Recv() {
    lock.Lock()
    while (boxfilled == false) sent.Wait(lock)
    let toret = box
    set boxfilled = false
    received.Broadcast()
    lock.Unlock()
    toret
  }
  
  chan(Send, Recv)
}

fun Channel(buflen) {
  if (buflen == 0) {
    make_unbuffered_chan()
  } else {
    abort "Buffered channels not implemented"
  }
}
