namespace "io"

// Interfaces.

// <obj>.Read(n) reads in a byte string of length at most n, or an EOF.
// <obj>.Write(bts) writes all of bts

struct Reader(Read)
struct Writer(Write)
struct ReadWriter(Read, Write)
struct ReadWriteCloser(Read, Write, Close)

// Convert a pair of Scheme ports to a ReadWriteCloser

fun SchemeToRWC(in, out) {
  fun Read(n) {
    let buffer = scheme::make_bytes(n)
    let num = scheme::read_bytes_avail(buffer, in)
    if (IsEOF(num)) {
      num
    } else if (num == 0) {
      EOF
    } else {
      scheme::subbytes(buffer, 0, num)
    }
  }
  fun Write(bts) {
    scheme::write_bytes(bts, out)
    scheme::force_output(out)
  }
  fun Close() {
    scheme::close_port(out)
    scheme::close_port(in)
  }
  ReadWriteCloser(Read, Write, Close)
}

// Standard IO

let Stdio = SchemeToRWC(scheme::current_input_port(), scheme::current_output_port())
    
// EOF things
let IsEOF = scheme::eof_objectP
let EOF = scheme::EOF

// Copy reader to writer

fun CopyIO(in, out) {
  mark out: while (true) {
    let res = in.Read(4096)
    if (IsEOF(res)) {
      break out EOF
    }
    out.Write(res)
  }
}

// Formatting

let Printf = scheme::ns_printf
let Sprintf = scheme::ns_format

// String to bytes, bytes to string

let StringToBytes = scheme::string2bytes
let BytesToString = scheme::bytes2string
