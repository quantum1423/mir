#lang mir
import "io"
import "math"

// Sum of fibonaccis under 4 million.
// TODO: Too imperative. There should be an "until" clause in for.
// The current parser hardcodes every combination. This needs to be fixed when
// porting to "ragg" is done.

def phi = (1 + math::Sqrt(5))/2
def fibonacci(n) = math::Floor((math::Expt(phi, n)/math::Sqrt(5)) + 0.5)

def main() = {
  def ctr = 1
  def sum = 0
  while true {
    def term = fibonacci(ctr)
    if term%2 == 0 {
      sum = sum + term
    }
    if term > 4000000 {
      break
    }
    ctr = ctr + 1
  }
  sum
}

main()
